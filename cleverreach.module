<?php

/**
 * @file
 * Primarily Drupal hooks and global API functions to manage the process.
 *
 * This is the main module file for CleverReach. The main entry point into
 * this module is _cleverreach_update_group_cache(), where it handles
 * the import of groups from cleverreach.
 */

define('CLEVERREACH_GROUPS_CACHE_ID', 'cleverreach_groups');

// Register the module-provided autoloader if xautoload and registry_autoload is
// missing.
if (!module_exists('xautoload') && !module_exists('registry_autoload')) {
  spl_autoload_register('_cleverreach_autoload');
}

/**
 * Cleverreach autoloader.
 *
 * @param string $class
 *   The name of the class to load.
 */
function _cleverreach_autoload($class) {
  if (stripos($class, 'Drupal\\cleverreach\\') !== FALSE) {
    $path = strtr(str_replace('Drupal\\cleverreach\\', '', $class), '\\', '/');
    module_load_include('php', 'cleverreach', "src/$path");
  }
}


/**
 * Implements hook_permission().
 */
function cleverreach_permission() {
  return array(
    'administer cleverreach' => array(
      'title' => t('Administer CleverReach Module'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function cleverreach_menu() {
  // Most of the UI is provided by Entity API Admin UI.
  $items['admin/config/services/cleverreach/settings'] = array(
    'title' => 'Settings',
    'description' => 'Fill in your Cleverreach API data.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_cleverreach_admin_settings'),
    'access arguments' => array('administer cleverreach'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'cleverreach.admin.inc',
  );
  $items['admin/config/services/cleverreach/group/%cleverreach_group'] = array(
    'title' => 'Group Details',
    'description' => 'Show details of a cleverreach group.',
    'page callback' => 'cleverreach_groups_group_detail',
    'page arguments' => array(5),
    'access arguments' => array('administer cleverreach'),
    'file' => 'cleverreach.admin.inc',
  );
  $items['admin/config/services/cleverreach/group/%cleverreach_group/view'] = array(
    'title' => 'Group Details',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function cleverreach_entity_info() {
  return array(
    'cleverreach_block' => array(
      'label' => 'Cleverreach Block',
      'entity class' => '\\Drupal\\cleverreach\\CleverReachBlock',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'cleverreach_block_forms',
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'bid',
        'name' => 'name',
        'label' => 'label',
      ),
      'label callback' => 'cleverreach_block_entity_label',
      'access callback' => 'cleverreach_block_entity_access',
      'module' => 'cleverreach',
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/config/services/cleverreach',
        'file' => 'cleverreach.admin.inc',
        'controller class' => '\\Drupal\\cleverreach\\CleverReachBlockUIController',
      ),
    ),
  );
}

/**
 * Access callback for the entity API.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $profile
 *   (optional) A block to check access for. If nothing is given, access for
 *   all profiles is determined.
 * @param $account
 *   (optional) The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   Whether access is allowed or not.
 */
function cleverreach_block_entity_access($op, $profile = NULL, $account = NULL) {
  return user_access('administer cleverreach', $account);
}

/**
 * Label callback for the entity API.
 *
 * @param Entity $entity
 * @param string $entity_type
 *
 * @return string
 */
function cleverreach_block_entity_label($entity, $entity_type) {
  if (!empty($entity) && isset($entity->label)) {
    return $entity->label;
  }
  return '';
}

/**
 * Gets an array of multiple cleverreach blocks.
 *
 * @param array $names
 *   Array of machine names to load.
 *
 * @return CleverReachBlock[]
 */
function cleverreach_get_blocks($names) {
  return entity_load_multiple_by_name('cleverreach_block', $names);
}

/**
 * Get a single cleverreach form.
 *
 * @param string $name
 *   Machine name of the form to load.
 *
 * @return CleverReachBlock
 */
function cleverreach_get_block($name) {
  $forms = cleverreach_get_blocks(array($name));
  return current($forms);
}

/**
 * Gets all cleverreach block objects.
 *
 * @return CleverReachBlock[]
 */
function cleverreach_get_all_blocks() {
  return entity_load_multiple_by_name('cleverreach_block', FALSE);
}

/**
 * Gets all cleverreach group objects.
 *
 * @return CleverReachGroup[]
 */
function cleverreach_get_all_groups() {
  $cache = cache_get(CLEVERREACH_GROUPS_CACHE_ID);
  if ($cache === FALSE) {
    return _cleverreach_update_group_cache();
  }
  return $cache->data;
}

/**
 * Get a single group.
 *
 * @param $crgid
 *   CleverReach group id.
 *
 * @return CleverReachGroup
 */
function cleverreach_get_single_group($crgid) {
  $groups = cleverreach_get_all_groups();
  if (isset($groups[$crgid])) {
    return $groups[$crgid];
  }
}

/**
 * Provides an options array for use in forms.
 *
 * @return array
 */
function cleverreach_get_group_options() {
  $options = array();
  $groups = cleverreach_get_all_groups();
  foreach ($groups as $group) {
    $options[$group->id] = $group->name;
  }
  return $options;
}

/**
 * Function to get API Settings from Drupal Variables. 
 */
function _cleverreach_get_settings() {
  $cr_api = array(
    'key' => variable_get('cleverreach_api_key', ''),
    'url' => variable_get('cleverreach_wsdl_url', ''),
  );

  if (empty($cr_api["key"]) || empty($cr_api["url"])) {
    watchdog('CleverReach', 'api settings are incomplete');
    return FALSE;
  }
  else {
    return $cr_api;
  }
}

/**
 * Implements hook_cron().
 */
function cleverreach_cron() {
  $queue = DrupalQueue::get('cleverreach_group_update_cron');
  $queue->createItem(array());
}

/**
 * Implements hook_cron_queue_info().
 */
function cleverreach_cron_queue_info() {
  $queues['cleverreach_group_update_cron'] = array(
    'worker callback' => '_cleverreach_update_group_cache',
    'time' => 120,
  );
  return $queues;
}

/**
 * Update the groups cache from the cleverreach server.
 *
 * @return CleverReachGroup[]
 */
function _cleverreach_update_group_cache() {
  $settings = _cleverreach_get_settings();

  $groups = array();

  if (is_array($settings)) {
    $api = cleverreach_get_soap_client();
    $result = $api->groupGetList($settings["key"]);

    if ($result->status == 'SUCCESS') {

      foreach ($result->data as $group) {
        $details = $api->groupGetDetails($settings["key"], $group->id);
        $group = array_merge(get_object_vars($group), get_object_vars($details->data));

        $group_object = new \Drupal\cleverreach\CleverReachGroup($group);

        $groups[$group_object->id] = $group_object;
      }

      cache_set(CLEVERREACH_GROUPS_CACHE_ID, $groups);

      watchdog('CleverReach', 'groups updated successfully', array(), WATCHDOG_INFO);
    }
    else {
      cache_set(CLEVERREACH_GROUPS_CACHE_ID, array());
      watchdog('CleverReach', 'group update failed', array(), WATCHDOG_ERROR);
    }
  }
  else {
    cache_set(CLEVERREACH_GROUPS_CACHE_ID, array());
    watchdog('CleverReach', 'CleverReach group update failed.', array(), WATCHDOG_ERROR);
  }

  return $groups;
}

/**
 * Implements hook_block_info().
 */
function cleverreach_block_info() {
  $blocks = array();

  $block_objects = cleverreach_get_all_blocks();

  foreach ($block_objects as $block) {
    if ($block->active) {
      $blocks[$block->name] = array(
        'info' => t('CleverReach: @grpname', array('@grpname' => $block->getGroup()->label())),
        'cache' => DRUPAL_NO_CACHE,
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function cleverreach_block_view($delta) {
  $output = array();

  $block = cleverreach_get_block($delta);
  if ($block && $block->active) {
    $output['subject'] = t('CleverReach: @grpname', array('@grpname' => $block->getGroup()->label()));
    $output['content'] = drupal_get_form('cleverreach_subscribe_form_' . $block->name);
  }

  return $output;
}

/**
 * Implements hook_forms().
 */
function cleverreach_forms($form_id, $args) {
  $forms = array();

  if (strpos($form_id, 'cleverreach_subscribe_form_') === 0) {

    module_load_include('inc', 'cleverreach', 'cleverreach.subscribe');
    $block_name = substr($form_id, strlen('cleverreach_subscribe_form_'));
    $forms[$form_id] = array(
      'callback' => 'cleverreach_subscribe_form',
      'callback arguments' => array(
        cleverreach_get_block($block_name),
      ),
    );
  }

  return $forms;
}

/**
 * Implements hook_theme().
 */
function cleverreach_theme($existing, $type, $theme, $path) {
  return array(
    'cleverreach_tableform' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function cleverreach_contextual_links_view_alter(&$element, &$items) {

  if (isset($element['#element']['#block']) && $element['#element']['#block']->module == 'cleverreach') {
    $element['#links']['cleverreach'] = array(
      'title' => 'CleverReach: Edit block',
      'href' => url('admin/config/services/cleverreach/manage/' . $element['#element']['#block']->delta, array('absolute' => TRUE)),
    );
  }
}

/**
 * Theming function for rendering form rows in a table.
 */
function theme_cleverreach_tableform($variables) {
  $element = $variables['element'];

  $columns = $element['#columns'];
  $rows = array();

  foreach (element_children($element) as $child_key) {
    $row = array();

    // Add additional column for tabledrag.
    if (isset($columns['weight'])) {
      $row[] = array('class' => array('entry-cross'));
    }

    foreach ($columns as $column => $column_name) {
      $row[$column] = array(
        'data' => isset($element[$child_key][$column]) ? $element[$child_key][$column] : '',
      );
    }

    $rows[] = array(
      'data' => $row,
      'class' => array('draggable'),
    );
  }

  $table_id = drupal_html_id('cleverreach_tableform');

  if (isset($columns['weight'])) {
    // For initial rendering we need to sort the rows manually.
    usort($rows, '_cleverreach_sort_tabledrag');

    // Add additional header for tabledrag.
    array_unshift($element['#columns'], '');
    // ... and the JS for tabledrag.
    drupal_add_tabledrag($table_id, 'order', 'sibling', 'draggable-weight');
  }

  return theme('table', array(
    'header' => array_values($element['#columns']),
    'rows' => $rows,
    'caption' => $element['#caption'],
    'attributes' => array('id' => $table_id),
  ));
}

/**
 * Sort callback for tabledrag rows.
 */
function _cleverreach_sort_tabledrag($a, $b) {
  if (!isset($a['data']['weight']['data']['#default_value'])) {
    return -1;
  }
  elseif (!isset($b['data']['weight']['data']['#default_value'])) {
    return +1;
  }
  else {
    return $a['data']['weight']['data']['#default_value'] > $b['data']['weight']['data']['#default_value'];
  }
}

/**
 * Returns the cleverreach soap client.
 *
 * Basically mimics a singleton.
 *
 * @return \Drupal\cleverreach\InterfaceV5;
 */
function cleverreach_get_soap_client() {
  static $soapClient;
  if (!$soapClient && ($settings = _cleverreach_get_settings())) {
    $soapClient = new \Drupal\cleverreach\InterfaceV5($settings["url"]);
  }
  return $soapClient;
}

/**
 * Adds a new user to list.
 *
 * @TODO Order handling.
 *
 * @return int|FALSE
 *   The ID of the newly created receiver or FALSE on failure.
 */
function cleverreach_receiver_add($list_id, $email, $active = TRUE, $source = NULL, $quality = NULL, array $attributes = array()) {
  if ($settings = _cleverreach_get_settings()) {
    $receiver_data = new \Drupal\cleverreach\Types\receiverData();
    $receiver_data->email = $email;
    $receiver_data->active = (bool) $active;
    $receiver_data->source = $source;
    if (!is_null($quality)) {
      $receiver_data->quality = (float) $quality;
    }
    $receiver_data->activated = time();
    $receiver_data->registered = time();
    if (!empty($attributes)) {
      $receiver_data->attributes = array();
      foreach ($attributes as $k => $v) {
        $receiver_data->attributes[] = array('key' => $k, 'value' => $v);
      }
    }
    $result = cleverreach_get_soap_client()->receiverAdd($settings['key'], $list_id, $receiver_data);
    // @TODO return the receiver id.
    if (!empty($result->status) && $result->status == 'SUCCESS') {
      return $result->data->id;
    }
  }
  return FALSE;
}

/**
 * This function generates the code skeleton in lib/* based on the SOAP wsdl.
 *
 * This uses the WSDLInterpreter as provided here:
 * https://github.com/CandoImage/WSDLInterpreter
 *
 * The skeleton provides us with autocompletion and typing checks for the
 * development.
 *
 * To use this function you've to download the WSDLInterpreter and place it in
 * the module folder.
 *
 * @link https://github.com/CandoImage/WSDLInterpreter
 *
 * @param string $wsdl
 */
function _cleverreach_generate_lib_from_wsdl($wsdl = 'http://api.cleverreach.com/soap/interface_v5.1.php?wsdl') {

  require_once dirname(__FILE__) . 'WSDLInterpreter/WSDLInterpreter.class.php';

  // Set WSDL and Namespace.
  $wsdlInterpreter = new WSDLInterpreter($wsdl, 'Drupal\\cleverreach');
  // Set Drupal specific indent.
  $wsdlInterpreter->setOutputIndent('  ');
  // Use argument typing rather than generic check.
  $wsdlInterpreter->setExpandMethodArguments(TRUE);
  // Disable generic argument check in the code.
  $wsdlInterpreter->setSkipArgumentCheck(TRUE);

  try {
    $results = $wsdlInterpreter->savePHP(dirname( __FILE__ ).'/lib/');

    echo "Written: \n";

    foreach($results as $result) {
      echo "$result \n";
    }
  } catch(WSDLInterpreterException $e) {
    echo $e->getMessage();
  }
}

/**
 * Implements hook_webform_component_info().
 */
function cleverreach_webform_component_info() {
  $components = array();

  $components['cleverreach'] = array(
    'label' => t('Cleverreach'),
    'description' => t('Sign up to a newsletter.'),
    'features' => array(
      'csv' => TRUE,
      'email' => TRUE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => TRUE,
      'conditional' => FALSE,
      'group' => FALSE,
      'attachment' => FALSE,
    ),
    'file' => 'cleverreach.webform.inc',
  );

  return $components;
}

/**
 * Implements hook_webform_submission_insert().
 */
function cleverreach_webform_submission_insert($node, $submission) {
  $cleverreach_lists = array();
  $email_address = '';

  if (!empty($node->webform['components'])) {
    foreach ($node->webform['components'] as $key => $field) {
      if ($field['type'] == 'cleverreach') {
        $cleverreach_lists[] = $field['extra']['cleverreach_group'];
        // Need to know if we should look for our own email field or another.
        if ($field['extra']['use_existing_email_field'] != 'cleverreach_field') {
          if (!empty($submission->data[$key][0])) {
            // Loop through components again to find our email field.
            foreach ($node->webform['components'] as $key2 => $field2) {
              if ($field2['form_key'] == $field['extra']['use_existing_email_field']) {
                $email_address = $submission->data[$key2][0];
              }
            }
          }
          // Visitor provided an email address but opted out of subscription.
          else {
            $email_address = '';
          }
        }
        // We have our own email field.
        else {
          $email_address = $submission->data[$key][0];
        }

        // Retrieve attributefields and create a merge array with key webform key
        // and value cleverreach merge tag.
        if (!empty($field['extra']['attributefields'])) {
          $attributefields_key_array = array();
          $keyvaluepairs = explode("\n", $field['extra']['attributefields']);

          foreach ($keyvaluepairs as $keyvalue) {
            $keyvalue = trim($keyvalue);
            $keyvalue = explode('|', $keyvalue);
            if (is_array($keyvalue) && !empty($keyvalue[0]) && !empty($keyvalue[1])) {
              $attributefields_key_array[$keyvalue[1]] = $keyvalue[0];
            }
          }
        }
      }
    }

    $attributefields_replacements = array();
    // Create the mergefield array.
    if (!empty($attributefields_key_array) && is_array($attributefields_key_array)) {
      foreach ($node->webform['components'] as $key => $field) {
        if (!empty($attributefields_key_array[$field['form_key']])) {
          // This is probably a bit to easy... The delta value is not taken
          // into account.
          $value = 0;
          if (isset($submission->data[$key][0])) {
            $value = $submission->data[$key][0];
          }
          $attributefields_replacements[$attributefields_key_array[$field['form_key']]] = $value;
        }
      }
    }

    // If we have an email address and a list is set, try to subscribe the user.
    if ($email_address != '' && !empty($cleverreach_lists)) {
      $api = cleverreach_get_soap_client();
      if ($api) {
        foreach ($cleverreach_lists as $cleverreach_list) {
          $success = cleverreach_receiver_add($cleverreach_list, $email_address, TRUE, variable_get('site_name', 'CleverReach Drupal Module'), NULL, $attributefields_replacements);
          if ($success) {
            watchdog('webform_cleverreach', 'E-mail subscribed: %email', array('%email' => $email_address), WATCHDOG_INFO);
          }
          else {
            watchdog('webform_cleverreach', 'E-mail not subscribed: %email Error: %error_code <br> %error_message', array('%email' => $email_address, '%error_message' => $q->errorMessage, '%error_code' => $q->errorCode), WATCHDOG_ERROR);
          }
        }
      }
      else {
        watchdog('webform_cleverreach', 'Could not get the cleverreach API object.', array(), WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * Load the group details.
 *
 * @param $group_id
 *
 * @return object
 */
function cleverreach_group_load($group_id) {
  if (($api = cleverreach_get_soap_client()) && $settings = _cleverreach_get_settings()) {
    $result = $api->groupGetDetails($settings['key'], $group_id);
    if ($result->status = 'SUCCESS') {
      return $result->data;
    }
  }
  return FALSE;
}